priority 0

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:name} {
${VISUAL}${0}
}  // ${2:`!p snip.rv = ('namespace ' + t[1]) if t[1] else 'anonymous namespace'`}
endsnippet

snippet tinc
#include "mm3rd/${1}${2:`!p
shortcuts = {
	'glog/': 'src/glog/logging.h',
	'gflags/': 'src/gflags/gflags.h',
	'protobuf/': 'src/google/protobuf/',
	'gtest/': 'include/gtest/gtest.h',
	'gmock/': 'gmock.h',
	'boost-': 'target/boost/',
}
if t[1] in shortcuts:
	snip.rv = shortcuts[t[1]]
`}"
endsnippet

snippet cr
const ${1:std::string}&
endsnippet

global !p
import re
basic_types = {
	'bool', 'char', 'unsigned char', 'int', 'short', 'long', 'long long',
	'unsigned int', 'unsigned short', 'unsigned long', 'unsigned long long',
	'int16_t', 'int32_t', 'int64_t', 'uint16_t', 'uint32_t', 'uint64_t',
}

def get_getter_type(v):
	field_parts = v.split()
	if len(field_parts) < 2:
		return v
	return field_parts[0]

def get_setter_type(v):
	field_parts = v.split()
	if len(field_parts) < 2:
		field_type = ' '.join(field_parts)
	else:
		field_type = ' '.join(field_parts[:-1])

	if not field_type.startswith('std::unique_ptr<') and field_type not in basic_types and not field_type.endswith('*'):
		if not field_type.startswith('const '):
			field_type = 'const ' + field_type
		if not field_type[-1] == '&':
			field_type = field_type + '&'

	return field_type

def get_setter_param_name(v):
	if not v:
		return 'field'
	return re.sub(r'^.*?m_?(\w+).*$', lambda m: m.group(1), v).strip()

def get_camel_case_name(v):
	if not v:
		return 'Field'
	field_name = re.sub(r'^.*?m_?(\w+).*$', lambda m: m.group(1), v)
	return re.sub(r'(^|_)([a-zA-Z])', lambda m: m.group(2).upper(), field_name).strip()
endglobal

snippet get
${VISUAL}

${3:`!p snip.rv = get_getter_type(snip.v.text)`} Get${2:`!p snip.rv = get_camel_case_name(snip.v.text)`}() const {
	return ${1:`!p snip.rv = (snip.v.text.split()[-1].rstrip(';') if snip.v.text else 'm_field')`};
}
endsnippet

snippet set
${VISUAL}

void Set${3:`!p snip.rv = get_camel_case_name(snip.v.text)`}(${4:`!p snip.rv = get_setter_type(snip.v.text)`} $1) {
	${2:`!p snip.rv = (snip.v.text.split()[-1].rstrip(';') if snip.v.text else 'm_field')`} = ${1:`!p snip.rv = get_setter_param_name(snip.v.text)`};
}
endsnippet
